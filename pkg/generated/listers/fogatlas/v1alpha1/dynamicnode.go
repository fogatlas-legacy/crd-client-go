/*
Copyright FBK.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/fogatlas/crd-client-go/pkg/apis/fogatlas/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DynamicNodeLister helps list DynamicNodes.
type DynamicNodeLister interface {
	// List lists all DynamicNodes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DynamicNode, err error)
	// DynamicNodes returns an object that can list and get DynamicNodes.
	DynamicNodes(namespace string) DynamicNodeNamespaceLister
	DynamicNodeListerExpansion
}

// dynamicNodeLister implements the DynamicNodeLister interface.
type dynamicNodeLister struct {
	indexer cache.Indexer
}

// NewDynamicNodeLister returns a new DynamicNodeLister.
func NewDynamicNodeLister(indexer cache.Indexer) DynamicNodeLister {
	return &dynamicNodeLister{indexer: indexer}
}

// List lists all DynamicNodes in the indexer.
func (s *dynamicNodeLister) List(selector labels.Selector) (ret []*v1alpha1.DynamicNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DynamicNode))
	})
	return ret, err
}

// DynamicNodes returns an object that can list and get DynamicNodes.
func (s *dynamicNodeLister) DynamicNodes(namespace string) DynamicNodeNamespaceLister {
	return dynamicNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DynamicNodeNamespaceLister helps list and get DynamicNodes.
type DynamicNodeNamespaceLister interface {
	// List lists all DynamicNodes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DynamicNode, err error)
	// Get retrieves the DynamicNode from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DynamicNode, error)
	DynamicNodeNamespaceListerExpansion
}

// dynamicNodeNamespaceLister implements the DynamicNodeNamespaceLister
// interface.
type dynamicNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DynamicNodes in the indexer for a given namespace.
func (s dynamicNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DynamicNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DynamicNode))
	})
	return ret, err
}

// Get retrieves the DynamicNode from the indexer for a given namespace and name.
func (s dynamicNodeNamespaceLister) Get(name string) (*v1alpha1.DynamicNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dynamicnode"), name)
	}
	return obj.(*v1alpha1.DynamicNode), nil
}
